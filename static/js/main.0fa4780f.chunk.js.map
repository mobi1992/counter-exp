{"version":3,"sources":["logo.svg","components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","state","count","this","setState","prevState","console","log","increment","className","onClick","incrementFive","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,I,wCCiDAA,E,kDA9CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACRC,MAAQ,GAJE,E,6CAOnB,WAAY,IAAD,OASPC,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC1BH,MAAQG,EAAUH,MAAQ,MAC1B,WAAQI,QAAQC,IAAI,iBAAkB,EAAKN,MAAMC,Y,2BAIzD,WAEIC,KAAKK,YACLL,KAAKK,YACLL,KAAKK,YACLL,KAAKK,YACLL,KAAKK,c,oBAET,WAAU,IAAD,OACL,OACI,qBAAKC,UAAY,YAAjB,SACG,qBAAKA,UAAY,MAAjB,SACI,qBAAKA,UAAY,mBAAjB,SACI,sBAAKA,UAAY,sBAAjB,UACK,0CAAcN,KAAKF,MAAMC,SACzB,wBAAQO,UAAY,kBAAkBC,QAAW,kBAAM,EAAKC,iBAA5D,oC,GAtCNC,aCSPC,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fa4780f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\n\nclass Counter extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             count : 0\n        }\n    }\n    increment(){\n        // You cannot do this, it will not be rendered in the UI\n        // this.state.count = this.state.count + 1\n        // Instead you should use the setState method\n        // this.setState({\n        //     count : this.state.count + 1\n        // } , () => { console.log('CallBack Value : ', this.state.count)})\n        // count will be incremented in UI but in console the count will be incremented in the next step, it is because the calls to setState are asynchronous, so first the console.log line will be executed then the count value will be updated. To fix this we use callback function\n        // console.log(this.state.count)\n        this.setState((prevState) => ({\n            count : prevState.count + 1\n        }), () => { console.log('Count value : ', this.state.count)})\n\n    }\n\n    incrementFive() {\n        // If you call increment() method five times, it will still be taken as one call, to solve this problem we have to use prevState.\n        this.increment()\n        this.increment()\n        this.increment()\n        this.increment()\n        this.increment()\n    }\n    render() {\n        return (\n            <div className = \"container\">\n               <div className = \"row\">\n                   <div className = \"col-md-4 mx-auto\">\n                       <div className = \"card card-body mt-5\">\n                            <h1 >count - {this.state.count}</h1>\n                            <button className = \"btn btn-primary\" onClick = {() => this.incrementFive()}>Increment</button>\n                       </div>\n                   </div>\n               </div>\n            </div>\n        )\n    }\n}\n\nexport default Counter\n","import logo from './logo.svg';\nimport './App.css';\nimport Counter from './components/Counter'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}